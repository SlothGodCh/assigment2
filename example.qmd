---
title: "Beginner's Guide to Git and GitHub"
author: "Jesus Biurrun"
format: 
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    code-fold: true
    code-tools: true
    code-copy: true
    theme: cosmo
    css: styles.css
    highlight-style: pygments
---

1.  Create a new RStudio Project. In this folder, create a simple qmd file called `example.qmd` that can be knitted into a HTML file. Show the result of the knitted file.

## Image Example

Here is an example image:

![Image](images/Fig1.png)
<!-- -->

1.  From the command line interface, initialise this folder as a git repository and push it to the GitHub classroom repository.

In order to initialize git when working in unconncected we have to use git init to initialize git

![Image](images/Fig4.png)

As shown in the picture we uae git add commit and push to stage and push all files that we have on the file we have now because I was trying to push onto the class repository instead of a repository I had access to I had a bit of a problem as shown: 

![Image](images/Fig5.png)
Now since I have no ownership of the repository no matter how much I tried to cheat Git neither I nor you will succed but you will still get a laugh out of me running around like a headless chicken(git_history.txt). To fix all of the "Fixing" which included but was not limited to modifying my SSH I created a new Repository in GitHub got the new SSH key and did:


When I first attempted to push my local repository to GitHub using the command:

git push --set-upstream origin main
I encountered the following error:

no such identity: /c/Users/jesus/.ssh/id_ed25519: No such file or directory
git@ssh.github.com: Permission denied (publickey).
fatal: Could not read from remote repository.
This indicated that Git couldn't find my SSH key at the expected location and consequently couldn't authenticate with GitHub. 

To resolve this, I had to remove the existing remote configuration:

git remote remove origin
I did this because the current remote configuration might have been incorrect or pointing to the wrong repository.

Configured SSH settings:

nano ~/.ssh/config
I edited my SSH configuration file to remove the modified SSH id from a public one (id_ed25519) to my own specific SSH id_rsa in the config file we had:

Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa (modification already done)

Tested the SSH connection to GitHub:

ssh -T git@github.com
The successful response:

Hi SlothGodCh! You've successfully authenticated, but GitHub does not provide shell access.
confirmed that my SSH configuration was now working correctly.

Attempted to push again, but encountered a new issue:

git push --set-upstream origin main
fatal: 'origin' does not appear to be a git repository
This occurred because I had removed the remote origin in step 1, so Git no longer knew where to push my code.

Added the correct remote repository:

git remote add origin git@github.com:SlothGodCh/assigment2.git
This command re-established the connection to my GitHub repository using the SSH protocol.

Successfully pushed my code:

git push -u origin main
The output showed all my files being compressed and uploaded, concluding with:

* [new branch]      main -> main
branch 'main' set up to track 'origin/main'.
This confirmed that my local 'main' branch was now successfully connected to the remote repository.

Verified the successful push:

git status
showed:

On branch main
Your branch is up to date with 'origin/main'.
nothing to commit, working tree clean
And:

git branch
displayed:

* main
  testbranch
confirming that my main branch was synchronized with GitHub and I had one additional local branch (testbranch).

Through this process, I resolved the authentication issue caused by myself if this was not the case the steps to follow would b:

git init
git add .
git commit -m "Initial commit: added example.qmd and knitted HTML file"

git remote add origin <github-repo-url>
git branch -M main
git push -u origin main

This sets up Git version control locally and connects it to your GitHub repo for collaboration and backup.



##2.  Create a new branch called `testbranch`. Modify the file `example.qmd` and add the changes to both the local and remote repositories.

To do this step I eliminated the previously created (if you followed the part 1 you cans skip this section) testbranch and restarted the process

##Deleting a Local Git Branch
To permanently delete the local testbranch, I used the force deletion command:

git branch -D testbranch
This successfully removed the branch with the confirmation:

Deleted branch testbranch (was 56e63ab).
Key Notes:

The -D flag forces deletion (equivalent to --delete --force)

This only affects the local repository - the remote branch remains unchanged

The hash 56e63ab shows the last commit on the deleted branch

Always ensure you've merged or saved needed changes before deletion

Warning: This action cannot be undone - all commits exclusive to this branch will be permanently lost unless they exist in another branch or were pushed to a remote.

##Git Branching Workflow Demonstration
Objective: Create a new branch called testbranch, modify files, and synchronize changes between local and remote repositories.

Step 1: Creating a New Branch
I began by creating and switching to a new branch called testbranch:

git checkout -b testbranch
The terminal responded:

Switched to a new branch 'testbranch'
This command simultaneously created the new branch and switched my working directory to it.

Step 2: Making and Staging Changes
I modified the example.qmd file and staged it for commit:

git add example.qmd
This prepared my changes to be permanently recorded in the version history.

Step 3: Committing Changes
I then committed the staged changes with a descriptive message:

git commit -m "Update example.qmd in testbranch"
The output showed:

[testbranch aca824d] Update example.qmd in testbranch
 1 file changed, 93 insertions(+), 1 deletion(-)
This created a permanent snapshot of my changes in the local repository's history.

Step 4: Pushing to Remote Repository
To synchronize with GitHub, I pushed the new branch:

git push -u origin testbranch
The detailed output showed the upload progress and concluded with:

* [new branch]      testbranch -> testbranch
branch 'testbranch' set up to track 'origin/testbranch'
This accomplished three things:

Created testbranch on the remote repository

Uploaded my committed changes

Established tracking between local and remote branches

Step 5: Checking Status and Adding More Changes
When I checked the status:

git status
It showed:

A modified RStudio project file

A new untracked image file (Fig6.png)

I staged all changes using:

git add .
The warning about line endings is normal when working across different operating systems.

Step 6: Final Commit and Push
I committed these additional changes:

git commit -m "Commit before pushing branch"
And pushed again to update the remote branch:

git push -u origin testbranch
The output confirmed successful synchronization of my latest changes.

Step 7: Switching Back to Main Branch
Finally, I returned to the main branch:

git switch main
The message:

Your branch is ahead of 'origin/main' by 1 commit.
Indicates I have local commits not yet pushed to the remote main branch.

Conclusion: Through this process, I successfully:

Created and worked in an isolated branch

Made and tracked changes to multiple files

Synchronized my work with the remote repository

Maintained proper version control practices

This workflow demonstrates the standard Git process for implementing new features without disrupting the main codebase.


3.  Create a folder called data, and add the data from Assignment 1 to that folder. Amend the previous commit to include the data folder. Push this amended commit to the remote.

Adding Data Folder and Amending Commit
Create data folder and add files

bash
mkdir data
# Copy your Assignment 1 data files into the data/ folder
ls data/  # Verify files are present
Stage the new files

bash
git add data/
Amend the previous commit

bash
git commit --amend --no-edit
--amend: Adds these changes to the last commit

--no-edit: Keeps the same commit message

Force push to update remote

bash
git push --force
Required because we rewrote commit history

Only safe for personal branches (like testbranch)

Important Notes:

This replaces the previous commit entirely

Never force-push to shared branches (main, dev, etc.)

If collaborating, inform teammates after force-pushing

The amended commit will now include both your original changes and the new data folder.

##4.  Switch back to the main branch and modify `example.qmd` in a different way such that it will conflict with `testbranch`. Commit and push these changes.

Creating and Resolving Merge Conflicts
Objective: Create a merge conflict between main and testbranch, then resolve it properly.

1. Switch to Main Branch
git switch main
Switches from testbranch back to the main development branch.

2. Create Conflicting Changes
bash
Modified the same section changed in testbranch with different content:
About this Project
This text is DIFFERENT on main!

3. Commit and Push Main Changes

git add .
git commit -m "Conflicting edit on main branch"
git push

Records and shares the conflicting changes with the remote repository.

4. Attempt Merge
bash
git merge testbranch

Output shows conflict detection:

Auto-merging example.qmd
CONFLICT (content): Merge conflict in example.qmd
Automatic merge failed; fix conflicts and then commit the result.

5. Resolve Conflict Manually
Opened example.qmd to see conflict markers:

markdown
<<<<<<< HEAD
This text is DIFFERENT on main!
=======
This text was added on testbranch.
>>>>>>> testbranch
Edited to combine both changes:

This text combines changes from both branches.

6. Complete the Merge
bash
git add example.qmd
git commit -m "Resolve merge conflict between main and testbranch"
git push
Finalizes the conflict resolution and updates the remote repository.

5.  Merge the changes in `testbranch` onto `main`. Show the conflict and fixing the merge conflict. Push the changes to GitHub, showing the status and changes in GitHub.

6.  Tag this commit v1.0 on `main` using an annotated tag.

7.  Delete branch `testbranch` locally and on the remote.

8.  Show the commit log in condensed form in the terminal.

9.  On main, create a new section in `example.qmd` that includes an easy to make plot. Commit the changes, and demonstrate using the command line interface how to undo the commit *without* losing your local changes.